// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.Limelight;
import frc.robot.Robot;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpiutil.math.MathUtil;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LimelightVision extends Subsystem {
    private boolean isDone;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public LimelightVision() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putNumber("Kp_Limelight", -0.03);
        SmartDashboard.putNumber("min_command_limelight", 0.01);
        isDone = false;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        double x = Limelight.getTx();
        double y = Limelight.getTy();
        double area = Limelight.getTa();
        SmartDashboard.putNumber("LimelightX", x);
        SmartDashboard.putNumber("LimelightY", y);
        SmartDashboard.putNumber("LimelightArea", area);
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double[] robomove() {
        Limelight.setLedMode(Limelight.LightMode.iOn);
        
        double x = Limelight.getTx();
        double y = Limelight.getTy();
        double area = Limelight.getTa();

        float Kp = (float)SmartDashboard.getNumber("Kp_Limelight", -0.03);//-0.06f;
        float min_command = (float)SmartDashboard.getNumber("min_command_limelight", 0.01);//0.01f;

        double heading_error = -x;
        float steering_adjust = 0.0f;
        if (x > 1.0) {
            steering_adjust = (float) (Kp * heading_error - min_command);
        } else if (x < 1.0) {
            steering_adjust = (float) (Kp * heading_error + min_command);
        }

        if (steering_adjust < .01 && steering_adjust > -.01 && Limelight.isTarget()) {
            isDone = true;
        }

        if (Limelight.isTarget()){
            Robot.ledDrive.setLightsPattern(Robot.ledDrive.GREEN);
        } else{
            Robot.ledDrive.setLightsPattern(Robot.ledDrive.RED);
        }
        
        MathUtil.clamp(steering_adjust, -.3, .3);

        if (Math.abs(steering_adjust) < .1){
            steering_adjust = Math.signum(steering_adjust) * 0.1f;
        }

        return new double[] {(double) steering_adjust, (double) -steering_adjust};
    }
    public void setIsDone(boolean input){
        isDone = input;
    }
    public boolean isDoneAligning(){
        return isDone;
    }
}
