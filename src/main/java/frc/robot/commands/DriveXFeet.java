// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;

/**
 *
 */
public class DriveXFeet extends Command {

    private static final double PIDTURN_P = .3;
    private static final double PIDTURN_I = 0.00;
    private static final double PIDTURN_D = 0.000;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_feet;
    private double m_maxSpeed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private PIDController pidController;
    private static final double feetPerTicks = 1.0 / 12.0;
    private double initialEncoderPosition;
    private double driveSpeed;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveXFeet(double feet, double maxSpeed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        pidController = new PIDController(PIDTURN_P, PIDTURN_I, PIDTURN_D);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_feet = feet;
        m_maxSpeed = maxSpeed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public DriveXFeet(double feet){
        this(feet, .4);
        pidController.setTolerance(.01);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        setTimeout(3);

        Robot.shifter.shiftLow();
        initialEncoderPosition = Robot.driveTrain.getFrontLeftEncoderPosition();

        pidController.setSetpoint(m_feet); 
        SmartDashboard.putNumber("DriveXFeet feetPerTicks", feetPerTicks);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double frontLeftEncoderPosition = Robot.driveTrain.getFrontLeftEncoderPosition();
        //feetPerTicks = SmartDashboard.getNumber("DriveXFeet feetPerTicks", 1.0 / 10.0);
        double feetMoved = feetPerTicks * Math.abs(frontLeftEncoderPosition - initialEncoderPosition);

        SmartDashboard.putNumber("DriveXFeet feetMovedCalculated", feetMoved);   
        SmartDashboard.putNumber("DriveXFeet frontLeftEncoderPosition", frontLeftEncoderPosition);
        SmartDashboard.putNumber("DriveXFeet initialEncoderPosition", initialEncoderPosition);
        SmartDashboard.putNumber("DriveXFeet m_feet", m_feet);
        SmartDashboard.putNumber("DriveXFeet pid setpoint",pidController.getSetpoint());

        

        driveSpeed = pidController.calculate(feetMoved, m_feet);

        if (driveSpeed > m_maxSpeed){
            driveSpeed = m_maxSpeed;
        }
        else if (driveSpeed < -m_maxSpeed){
            driveSpeed = -m_maxSpeed;
        }
        
        Robot.driveTrain.driveRaw(driveSpeed, driveSpeed);
        SmartDashboard.putNumber("DriveTrain frontLeftEncoder", Robot.driveTrain.getFrontLeftEncoderPosition());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return pidController.atSetpoint() || isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
